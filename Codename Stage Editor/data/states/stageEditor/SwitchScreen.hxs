import Xml;
import haxe.io.Path;

import flixel.addons.display.FlxBackdrop;
import flixel.FlxCamera;

import openfl.filters.ShaderFilter;

import funkin.backend.scripting.Script;
import funkin.options.OptionsScreen;
import funkin.options.OptionsTree;
import funkin.options.type.IconOption;

var tree;

var camShaders = [];
var blurShader:CustomShader = new CustomShader(Options.intensiveBlur ? "engine/editorBlur" : "engine/editorBlurFast");
var screenCam = new FlxCamera();

function create() {
	CoolUtil.playMenuSFX(0);

	for(c in FlxG.cameras.list) { //i love copy pasting
		// Prevent adding a shader if it already has one
		if(c._filters != null) {
			var shouldSkip = false;
			for(filter in c._filters) {
				if(Std.isOfType(filter, ShaderFilter)) {
					if(Std.isOfType(filter.shader, CustomShader)) {
						var shader:CustomShader = filter.shader;

						if(shader.path == blurShader.path) {
							shouldSkip = true;
							break;
						}
					}
				}
			}
			if(shouldSkip)
				continue;
		}
		camShaders.push(c);
		c.addShader(blurShader);
	}

	screenCam.bgColor = 0;
	FlxG.cameras.add(screenCam, false);

	var bg = new FlxBackdrop();
	bg.velocity.set(125, 125);
	bg.loadGraphic(Paths.image('editors/bgs/charter'));
	bg.antialiasing = true;
	bg.alpha = 0.5;
	add(bg);

	var modsList:Array<String> = Character.getList(true);

	var list = [ //i love copy pasting 2
		for (char in (modsList.length == 0 ? Character.getList(false) : modsList))
			new IconOption(char, "Press ACCEPT to edit this character.", Character.getIconFromCharName(char), changeChar)
	];

	tree = new OptionsTree();
	tree.add(new OptionsScreen("Character List", "Select a character to switch to.", list));
	add(tree);

	cameras = [screenCam];
}

function update(e) {
	if (FlxG.keys.justPressed.ESCAPE)
		close();
}

function destroy() {
	for(e in camShaders)
		e.removeShader(blurShader);
	blurShader = null;

	FlxG.cameras.remove(screenCam);
}

function changeChar() {
	var char = FlxG.state.stateScripts.get("editingSprite");
	var stageGroup = FlxG.state.stateScripts.get("stageGroup");

	var newChar = new Character(char.sprite.x, char.sprite.y, tree.members[0].members[tree.members[0].curSelected].text, char.sprite.isPlayer);
	stageGroup.remove(char.sprite, true);
	char.sprite.destroy();
	char.sprite = newChar;
	stageGroup.insert(char.index, char.sprite);

	close();
}